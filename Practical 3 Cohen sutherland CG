#include<iostream>
#include<graphics.h>
#include<math.h>

using namespace std;
static int LEFT=1,RIGHT=2,BOTTOM=4,TOP=8,xl,yl,xh,yh;

int getcode(int x,int y){
    int code = 0;
    //Perform Bitwise OR to get outcode
    if(y > yh) code |= TOP;     // Set TOP bit if y is above the window
    if(y < yl) code |= BOTTOM;  // Set BOTTOM bit if y is below the window
    if(x < xl) code |= LEFT;    // Set LEFT bit if x is to the left of the window
    if(x > xh) code |= RIGHT;   // Set RIGHT bit if x is to the right of the window
    return code;
}

int main(){
    int gdriver = DETECT,gmode;
    initgraph(&gdriver,&gmode,NULL); // Initialize the graphics system
    cout<<"Enter bottom left and top right co-ordinates of window: ";
    cin>>xl>>yl>>xh>>yh;  // Input window coordinates from the user
    setcolor(15);   // Set color to white
    rectangle(xl,yl,xh,yh);  // Draw the rectangular window
    int x1,y1,x2,y2;
    cout<<"Enter the endpoints of the line: ";
    cin>>x1>>y1>>x2>>y2;  // Input line endpoints from the user
    setcolor(4);   // Set color to red
    line(x1,y1,x2,y2);  // Draw the initial line
    getch();  // Wait for a key press

    int outcode1=getcode(x1,y1), outcode2=getcode(x2,y2);
    int accept = 0;  // Decides if the line is to be drawn
    while(1){
        float m =(float)(y2-y1)/(x2-x1);  // Calculate the slope of the line
        // Both points inside. Accept line
        if(outcode1==0 && outcode2==0){ 
            accept = 1;
            break;
        }
        // AND of both codes != 0. Line is outside. Reject line
        else if((outcode1 & outcode2)!=0){
            break;
        }else{
            int x,y;
            int temp;
            // Decide if point1 is inside, if not, calculate intersection
            if(outcode1==0) 
                temp = outcode2;
            else 
                temp = outcode1;
            // Line clips top edge
            if(temp & TOP){
                x = x1+ (yh-y1)/m;
                y = yh;    
            }
            else if(temp & BOTTOM){  // Line clips bottom edge
                x = x1+ (yl-y1)/m;
                y = yl;
            }else if(temp & LEFT){  // Line clips left edge
                x = xl;
                y = y1+ m*(xl-x1);
            }else if(temp & RIGHT){  // Line clips right edge
                x = xh;
                y = y1+ m*(xh-x1);
            }
            // Check which point we had selected earlier as temp and replace its coordinates
            if(temp == outcode1){ 
                x1 = x;
                y1 = y;
                outcode1 = getcode(x1,y1);
            }else{
                x2 = x;
                y2 = y;
                outcode2 = getcode(x2,y2);
            }
        }
    }
    setcolor(BLUE);  // Set color to blue
    cout<<"After clipping:";
    if(accept)
        line(x1,y1,x2,y2);  // Draw the clipped line if accepted
    getch();  // Wait for a key press
    closegraph();  // Close the graphics system
    return 0;
}
