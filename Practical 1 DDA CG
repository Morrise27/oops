#include <iostream>
#include <graphics.h>
#include <math.h>
using namespace std;

class practical
{
    public:
    void DDA(float , float, float, float,int);
    void cir(int, int, int);
};
void practical :: DDA(float x1, float y1, float x2, float y2, int col)
{
        int steps;
        float xincre, yincre, x , y;
        int dx = x2 - x1;
        int dy = y2 - y1;
        if (abs(dx) >= abs(dy))
		{
            steps = dx;
        }
        else{
            steps = dy;
        }
        xincre = (float)dx/ steps;
        yincre = (float)dy/ steps;
        x = x1; 
        y = y1;
        putpixel(x, y, 8);
        
        for (int i = 0; i < steps; i++)
		{
            x = x + xincre;
            y = y + yincre;
            x1 = x + 0.5;
            y1 = y + 0.5;
            putpixel(x1, y1, col);
        }
}
void practical :: cir(int x, int y, int rad)
{
    int x1 = 0;
    int y1 = rad;
    int pk = 3 - 2*rad;
    
    putpixel(x, y, 15);
    
    while (x1 <= y1)
	{
        if (pk <= 0)
		{
            pk = pk + 4*(x1) + 6;
            x1 = x1 + 1; 
        }
        else
		{
            pk = pk + 4*(x1 - y1) + 10;
            x1 = x1 + 1;
            y1 = y1 - 1;
        }
        putpixel(x + x1, y + y1, 1);
        delay(5);
        putpixel(x + x1, y - y1, 2);
        delay(5);
        putpixel(x - x1, y + y1, 3);
        delay(5);
        putpixel(x - x1, y - y1, 4);
        delay(5);
        putpixel(x + y1, y + x1, 5);
        delay(5);
        putpixel(x + y1, y - x1, 6);
        delay(5);
        putpixel(x - y1, y + x1, 7);
        delay(5);
        putpixel(x - y1, y - x1, 8);
        delay(5);
    }
}
int main()
{
    int gd, gm, r1, r2;
    float len;
    practical pr1;
    gd = DETECT;
    initgraph(&gd, &gm, NULL);

    int x = 400 / 2;
    int y = 300 /2;
    r1 = 100;
    r2 = 50;
    
    pr1.cir(x, y, r1);

    len = (int)sqrt(r1*r1 - r2*r2);
    
    pr1.DDA(x, y-r1, x + len, y + r2, 5);
    delay(5);
    pr1.DDA(x - len, y + r2, x + len, y + r2, 13);
    delay(5);
    pr1.DDA( x, y - r1,x - len, y + r2, 9);
    delay(5);
    
    pr1.cir(x, y, r2);
    
    getch();
    closegraph();    
    return 0;
}
